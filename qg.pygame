import sys, time, pygame,json

from engine import tiles
from engine import player
from engine import motor
from engine import foe
from engine import lifemanager

def main():
    pygame.init()

    size = width, height = 640, 480
    black = 0, 0, 0
    blue = 0, 0, 255

    # Initialize font
    pygame.font.init()
    font = pygame.font.Font(None, 36)

    screen = pygame.display.set_mode(size)
    pygame.mouse.set_visible(False)

     # Initialize joystick
    pygame.joystick.init()
    if pygame.joystick.get_count() > 0:
        joystick = pygame.joystick.Joystick(0)
        joystick.init()
    else:
        joystick = None

    player1 = player.Player("bonk.png",(8,2),(32,32)) # Plyaer , nb of sprite W and H, size W and H

    targetrect = pygame.Rect(0, 0, width, height)

    # Lire et analyser le fichier base.tmj
    with open('tiles/test.tmj', 'r') as file:
        base_tmj_data = json.load(file)

    layers = base_tmj_data.get("layers", [])

    with open('tiles/level1.tsj', 'r') as file:
        base_tsj_data = json.load(file)

    tiles_tjs = base_tsj_data.get("tiles", [])

    screen_height = base_tmj_data.get("height",int)
    screen_width = base_tmj_data.get("width",int)
    tilesize =  base_tmj_data.get("tilewidth",int)

    print("laoding tileset: " + str(screen_width) + "x" + str(screen_height) + " tilesize: " + str(tilesize))

    fixedbg = pygame.image.load("fixedbg.jpg")
    fixedrect = fixedbg.get_rect()
    tileset = tiles.Tileset("tiles/level1.png",(tilesize,tilesize),0,0)
    tilemap = tiles.Tilemap(layers[1].get("data", []),tileset,(screen_width,screen_height),tiles_tjs)
    tilemap1 = tiles.Tilemap(layers[0].get("data", []),tileset,(screen_width,screen_height))
    levelsize = (screen_width*tileset.width,screen_height*tileset.height)

    life_manager = lifemanager.LifeManager(layers[2].get("objects", []),tilemap)
    
    motor1 = motor.Motor(player1,tilemap,[tilemap1,tilemap],(width,height))
    motor1.set_life_manager(life_manager)
    tilemap.render()
    tilemap1.render()
    
    speed = 4

    #print("starting with a " + str(tilemap.size[0]) + "-" + str(tilemap.size[1]) + " map")
    speedscreen = 1

    # debug
    select = 0
    # 0: jump_speed
    # 1: speed
    # 2: player1.anim_speed
    # 3: motor1.gravity
    params = [10,4,5,50]  # [10,4,5,50]
    
    while 1:
        motor1.set_speed(0)

        for event in pygame.event.get():
            if event.type == pygame.QUIT: return
        
        keys = pygame.key.get_pressed()

        if keys[pygame.K_RIGHT]:
            motor1.set_speed(speed)
        elif keys[pygame.K_LEFT]:
            motor1.set_speed(-speed)

        if keys[pygame.K_UP] or keys in (97, 98):  # A and B keys:
            motor1.jump()  

        if joystick:
            if  event.type == pygame.JOYBUTTONDOWN:
                #for button in range(joystick.get_numbuttons()):
                #    if joystick.get_button(button):
                #        print(f"Button {button} pressed")
                if joystick.get_button(3):  # Button A on the joystick A:3 B:4:Y:5 X:6 : R:8 L:7 ZR:14 : ZL:13 Select : 9 Start : 10
                    motor1.jump()  
                if joystick.get_button(9):  # Button A on the joystick A:3 B:4:Y:5 X:6 : R:8 L:7 ZR:14 : ZL:13 Select : 9 Start : 10
                    select += 1
                    if (select > 3):
                        select = 0
                if joystick.get_button(14):  # Button A on the joystick A:3 B:4:Y:5 X:6 : R:8 L:7 ZR:14 : ZL:13 Select : 9 Start : 10
                    params[select] += 1
                if joystick.get_button(13):  # Button A on the joystick A:3 B:4:Y:5 X:6 : R:8 L:7 ZR:14 : ZL:13 Select : 9 Start : 10
                    params[select] -= 1
            if joystick.get_axis(0) > 0.5:
                motor1.set_speed(speed)
            elif joystick.get_axis(0) < -0.5:
                motor1.set_speed(-speed)
                
        #motor1.targetrect = targetrect
        motor1.move_and_collide()

        tilemap.render_animation()
        #screen.fill(blue)
        screen.blit(fixedbg, fixedrect)

        motor1.render(screen)

        life_manager.render(screen)

        player1.render(screen)
        
        motor1.jump_speed = params[0]
        speed = params[1]
        player1.anim_speed = params[2]
        motor1.gravity = params[3] / 100

        debug = str(select) + " " + str(motor1.jump_speed) + " " + str(speed ) + " " +str(player1.anim_speed) + " " + str(motor1.gravity)
        # Render targetrect value as text
        white = (255, 255, 255)
        text_surface = font.render(f"targetrect: {debug}", True, white)
        screen.blit(text_surface, (10, 10))

        time.sleep(0.01)
        pygame.display.flip()

if __name__ == '__main__':
    main()